{{ if .Values.source.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "flink-state-analysis.fullname" . }}-load-data
  labels:
    app.kubernetes.io/name: {{ include  "flink-state-analysis.name" . }}-load-data
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include  "flink-state-analysis.name" . }}-load-data
    spec:
      restartPolicy: Never
      initContainers: #[] #git clone, build, get data

        - name: get-repo
          image: alpine/git
          volumeMounts:
            - mountPath: "{{ .Values.flink.build.localDirectory }}"
              name: git-volume
          command: ["sh"]
          args:
            [
              "-c",
              "git clone {{ .Values.flink.build.codeRepository }} {{ .Values.flink.build.localDirectory }}",
            ]
{{ if .Values.flink.build.enabled }}            
        - name: build-stream
          image: maven:3.8.4-openjdk-8
          volumeMounts:
            - mountPath: "{{ .Values.flink.build.localDirectory }}"
              name: git-volume
          command: ["sh"]
          args: ["-c", "cd {{ .Values.flink.build.localDirectory }} ; mvn clean package"]
{{ end }}
        - name: retrieve-data
          image: python:3.9.10
          volumeMounts:
            - mountPath: /app/state-analysis
              name: git-volume
          env:
            - name: DATA_DIRECTORY
              value: "{{ .Values.workload.dataDir }}"
            - name: SQL_KEYS
              value: "{{ .Values.workload.keys }}"
            - name: KEY_MATCHING
              value: "{{ .Values.workload.keyMatching }}"
            - name: DATASET_SIZE
              value: "{{ .Values.workload.datasetSize }}"
          command: ["bash"]
          args:
            [
              "-c",
              "cd /app/state-analysis/scripts ; python3 data_generator.py --data_dir=$DATA_DIRECTORY --keys=$SQL_KEYS --key_matching=$KEY_MATCHING --size=$DATASET_SIZE",
            ]
      containers: # sync data
        - name: load-data
          image: "minio/mc"
          volumeMounts:
            - mountPath: /app/state-analysis
              name: git-volume
          command:
            [
              "/bin/bash",
              "-c",
              "ls {{ .Values.workload.dataDir }}; 
              mc config host add minio http://{{ .Values.source.host }} {{ .Values.source.user }} {{ .Values.source.password }}; 
              mc mb -p minio/{{ .Values.source.bucket }} ; 
{{ if .Values.flink.build.enabled }}
              mc cp {{ .Values.flink.build.localDirectory }}/target/{{ .Values.flink.jarName }} minio/{{ .Values.source.bucket }}/{{ .Values.source.baseDir }}/{{ .Values.flink.jarName }}  || true; 
{{ end }}
              mc cp --recursive {{ .Values.workload.dataDir }} minio/{{ include "flink-state-analysis.sourceTablePath" . }}",
            ]
      volumes:
        - name: git-volume
          emptyDir: {}
{{- end }}
